<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MW</name>
    </assembly>
    <members>
        <member name="E:MW.Aircraft.Aircraft.UpdateHUD">
            <summary>Used to update the player's HUD with speed and altitude information.</summary>
        </member>
        <member name="F:MW.Aircraft.Aircraft.kRollDelta">
            <summary>Increases the rate of roll.</summary>
        </member>
        <member name="F:MW.Aircraft.Aircraft.fGForce">
            <summary>The G-Force experienced by this aircraft.</summary>
        </member>
        <member name="F:MW.Aircraft.Aircraft.t">
            <summary>Used for lerping.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.Yaw(System.Boolean)">
            <summary>Yaws the airplane along the Y-Axis.</summary>
            <param name="bNegative">True if yawing left.</param>
        </member>
        <member name="M:MW.Aircraft.Aircraft.Pitch(System.Boolean)">
            <summary>Pitches the airplane along the X-Axis.</summary>
            <param name="bNegative">True if pitching upwards.</param>
        </member>
        <member name="M:MW.Aircraft.Aircraft.Roll(System.Boolean)">
            <summary>Rolls the airplane along the Z-Axis.</summary>
            <param name="bNegative">True if rolling right.</param>
        </member>
        <member name="F:MW.Aircraft.Aircraft.smooth">
            <summary>Smoothing for returning to level flight.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.ReturnToLevelRoll">
            <summary>Returns to level horizontal flight like a normal passenger plane.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.AirResistance">
            <returns>The direction where air resistance should be applied.</returns>
        </member>
        <member name="M:MW.Aircraft.Aircraft.AngularDrag">
            <returns>1 if rigidbody is moving in the direction it is facing. 0 if rigidbody is moving in a direction +-90 degrees from where it is facing. -1 if rigidbody is moving in the opposite direction of where it is facing.</returns>
        </member>
        <member name="M:MW.Aircraft.Aircraft.CalculateGForce">
            <summary>Updates the G-Force.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.HorizontalAngle">
            <returns>The angle in degrees this airplane is from the horizon.</returns>
        </member>
        <member name="M:MW.Aircraft.Aircraft.Speed">
            <returns>The speed of this aircraft per delta time.</returns>
        </member>
        <member name="M:MW.Aircraft.Aircraft.ClampedSpeed">
            <returns>The speed of this aircraft clamped at a minimum of zero and one by Time.deltaTime.</returns>
        </member>
        <member name="M:MW.Aircraft.Aircraft.PlayExhaust">
            <summary>Plays the particle system exhaust effect.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.StopExhaust">
            <summary>Stops the particle system exhaust effect.</summary>
        </member>
        <member name="M:MW.Aircraft.Aircraft.ShowVorticies(System.Single)">
            <summary>Enables the trail renderer vorticies effect.</summary>
        </member>
        <member name="T:MW.Audio.AudioControl">
            <summary>The Audio controller for in-game sounds.</summary>
        </member>
        <member name="M:MW.Audio.AudioControl.Initialise(MW.Audio.Sound[])">
            <summary>Populates the Sounds array to match the settings.</summary>
        </member>
        <member name="M:MW.Audio.AudioControl.Play(System.String)">
            <summary>Plays sound of name n.</summary>
            <param name="sName">The name of the requested sound to play in capital casing.</param>
        </member>
        <member name="M:MW.Audio.AudioControl.Stop(System.String)">
            <summary>Stops sound of name n.</summary>
            <param name="sName">The name of the requested sound to stop playing in capital casing.</param>
        </member>
        <member name="M:MW.Audio.AudioControl.StopAll">
            <summary>Stop every sound in the game.</summary>
        </member>
        <member name="M:MW.Audio.AudioControl.Find(System.String)">
            <summary>Returns a sound in the Sounds array.</summary>
            <param name="n">The name of the requested sound.</param>
            <returns>The sound clip of the requested sound.</returns>
        </member>
        <member name="M:MW.Audio.AudioControl.IsPlaying(System.String)">
            <summary>Whether or not sound of name n is playing.</summary>
            <param name="sName">The name of the sound to query in capital casing.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector3)">
            <summary>The corresponding colour in RGA using Vector3.</summary>
            <param name="vColour">The RGB/XYZ channel values, respectively.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector4)">
            <summary>The corresponding colour in RGBA using Vector4.</summary>
            <param name="v4Colour">The RGBA/XYZW channel values, respectivaly.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String)">
            <summary>Converts a hexadecimal to its corresponding colour.</summary>
             <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.Single)">
            <summary>The corresponding hexadecimal and alpha colour.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="fAlpha">The float alpha.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.String)">
            <summary>The corresponding hexadecimal colour and hexadecimal alpha.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="sAlpha">The hexadecimal in the format: "#AA"; where '#' denotes a hexadecimal and 'AA' denotes the Alpha channel.</param>
        </member>
        <member name="M:MW.Conversion.Bearing.Direction(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The normalised direction to to, relative to from.</summary>
            <param name="vFrom">The Vector3 seeking a direction to to.</param>
            <param name="vTo">The direction to look at.</param>
        </member>
        <member name="M:MW.Conversion.Bearing.Direction(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>The normalised direction to to, relative to from.</summary>
            <param name="vFrom">The Vector3 seeking a direction to to.</param>
            <param name="vTo">The direction to look at.</param>
        </member>
        <member name="M:MW.Easing.Interpolate.GetEasingFunction(MW.Equation)">
            <summary>
            Returns the function associated to the easingFunction enum. This fValue returned should be cached as it allocates memory
            to return.
            </summary>
            <param name="EEasingFunction">The enum associated with the easing function.</param>
            <returns>The easing function</returns>
        </member>
        <member name="M:MW.Easing.Interpolate.GetEasingFunctionDerivative(MW.Equation)">
            <summary>
            Gets the derivative function of the appropriate easing function. If you use an easing function for position then this
            function can get you the speed at a given time (normalized).
            </summary>
            <param name="easingFunction"></param>
            <returns>The derivative function</returns>
        </member>
        <member name="F:MW.General.Generic.k1To255RGB">
            <summary>The ratio between 1 and 255.</summary>
        </member>
        <member name="M:MW.General.Generic.InFOV(MW.Direction,UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>If self can see target within SearchAngle degrees while facing face.</summary>
            <param name="dirFace">The direction self is facing.</param>
            <param name="TSelf">The transform searching for target.</param>
            <param name="TTarget">The transform to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.General.Generic.InFOV(MW.Direction,UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>If self can see target within SearchAngle degrees while facing face.</summary>
            <param name="dirFace">The direction self is facing.</param>
            <param name="TSelf">The transform searching for target.</param>
            <param name="vTarget">The position to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.General.Generic.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.LayerMask)">
            <summary>If self has a line of sight to to.</summary>
            <param name="vSelf">The position to look from.</param>
            <param name="vTo">The position to look to.</param>
            <param name="lmObstacles">The obstacles to consider obtrusive.</param>
        </member>
        <member name="M:MW.General.Generic.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>If self has a line of sight to to.</summary>
        </member>
        <member name="M:MW.General.Generic.RoundToDP(System.Single,System.Int32)">
            <summary>The fValue rounded to dp decimal places.</summary>
             <param name="fValue">The value to be rounded.</param>
             <param name="nDP">The decimal places to be included.</param>
        </member>
        <member name="M:MW.General.Generic.FlipFlop(System.Boolean@)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
        </member>
        <member name="M:MW.General.Generic.FlipFlop(System.Boolean@,System.Action,System.Action)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
            <param name="ACallbackTrue">The method to call if the flip-flop is true.</param>
            <param name="ACallbackFalse">The method to call if the flip-flop is false.</param>
        </member>
        <member name="M:MW.General.Generic.IsWithin(System.Single,System.Single,System.Single)">
            <summary>If value is within the +- limit of from.</summary>
            <param name="fValue">The value to check.</param>
            <param name="fFrom">The value to compare.</param>
            <param name="fLimit">The limits to consider.</param>
        </member>
        <member name="M:MW.General.Generic.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The largest vector between L and R, according to magnitude.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.General.Generic.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The smallest vector vector between L and R, according to magnitude.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.General.Generic.Fibonacci(System.Int32)">
            <summary>Returns the n'th Fibonacci number.</summary>
            <param name="n"></param>
        </member>
        <member name="M:MW.General.Generic.GenerateEqualSphere(System.Int32,System.Single)">
            <summary>Generates spherical points with an equal distribution.</summary>
            <param name="nResolution">The number of points to generate.</param>
            <param name="fGoldenRationModifier">Adjusts the golden ratio.</param>
            <returns>The Vector3[] points for the sphere.</returns>
        </member>
        <member name="M:MW.General.Generic.Bridge(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>Generates the points to 'bridge' origin and target together at a height as an arc.</summary>
            <param name="vOrigin">The starting point of the bridge.</param>
            <param name="vTarget">The ending point of the bridge.</param>
            <param name="nResolution">The number of points for the bridge.</param>
            <param name="fHeight">The maximum height of the bridge.</param>
            <returns>The Vector3[] points for the bridge.</returns>
        </member>
        <member name="M:MW.HUD.Draw.DrawLine(UnityEngine.LineRenderer,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,UnityEngine.Material,System.Boolean)">
            <summary>
            Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.
            </summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="MMaterial">The material used to draw the line.</param>
            <param name="bUseWorldSpacUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawLine(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.
            </summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="bUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawCircle(UnityEngine.LineRenderer,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,UnityEngine.Material,System.Boolean,System.Int32)">
            <summary>
            Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.
            </summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="MMaterial">The material used to draw the circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawCircle(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,System.Boolean,System.Int32)">
            <summary>
            Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.
            </summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="M:MW.HUD.UI.ScaleSize(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Scales the canvas element relative to self.</summary>
            <param name="vSelf">The position to scale from.</param>
            <param name="vScaleWith">The position to scale with.</param>
            <returns>The relative scale size in Vector2.</returns>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.Mode)">
            <summary>Animates tmpTextMeshPro to display sContent like a typewriter.</summary>
            <param name="tmpTextMeshPro">The text to animate.</param>
            <param name="sContent">The content to display.</param>
            <param name="fDelay">The time gap between writing a new letter.</param>
            <param name="mMode">Should the text append, or clear?</param>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.Mode,System.String)">
            <summary>Animates tmpTextMeshPro to display sContent like a typewriter.</summary>
            <param name="tmpTextMeshPro">The text to animate.</param>
            <param name="sContent">The content to display.</param>
            <param name="fDelay">The time gap between writing a new letter.</param>
            <param name="mMode">Should the text append, or clear?</param>
            <param name="sSound">The sound to play for every letter added on.</param>
        </member>
        <member name="M:MW.IO.Mouse.Click(MW.IO.Mouse.Button,System.Boolean,System.Boolean)">
            <param name="BMouse">The mouse press to listen for.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If the BMouse was clicked or held.</returns>
        </member>
        <member name="M:MW.IO.Keyboard.Key(UnityEngine.KeyCode,System.Boolean,System.Boolean)">
            <param name="KCStroke">The key that was pressed on the keyboard.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If Stroke was pressed or Held.</returns>
        </member>
        <member name="T:MW.Pair`2">
            <summary>Generates a new pair of two types of values.</summary>
            <typeparam name="T_First">The type of the first variable to store.</typeparam>
            <typeparam name="T_Second">The type of the second variable to store.</typeparam>
        </member>
        <member name="T:MW.Triple`3">
            <summary>Generates a new variable of three types of values.</summary>
            <typeparam name="T_First">The type of the first variable to store.</typeparam>
            <typeparam name="T_Second">The type of the second variable to store.</typeparam>
            <typeparam name="T_Third">The type of the third variable to store.</typeparam>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Camera,UnityEngine.Transform)">
            <summary>Have the camera follow target's transform.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="TTarget">The target's transform component.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Camera,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the camera to follow target's transform at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="TTarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Transform)">
            <summary>Have the main camera follow target's transform.</summary>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's transform at an offset.</summary>
            <param name="TTarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position.</summary>
        </member>
        <member name="M:MW.MWCamera.MWCamera.CameraFollow(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position at an offset.</summary>
            <param name="vTarget">The target's position.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.Billboard(UnityEngine.Transform)">
            <summary>Ensures the transform always faces the main camera.</summary>
            <param name="TSelf">The transform to look towards the main camera.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.Billboard(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>Ensures the transform always faces camera.</summary>
            <param name="TSelf">The transform to look towards the camera.</param>
            <param name="CCamera">The camera to look at.</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.Billboard(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="TSelf">The transform to look towards the point.</param>
            <param name="TPoint">The transform of where self needs to look towards</param>
        </member>
        <member name="M:MW.MWCamera.MWCamera.Billboard(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="TSelf">The transform to look towards the point.</param>
            <param name="vPoint">The point in world coordinates.</param>
        </member>
        <member name="F:MW.MWPhysics.Kinematics.kVelocityRatio">
            <summary>Convert inspector speed to m/s.</summary>
        </member>
        <member name="M:MW.MWPhysics.Kinematics.HasReached(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            If the distance between from and to is less than or EqualTo detection.
            </summary>
            <param name="vFrom">The reference coordinate to compare.</param>
            <param name="vTo">The target coordinate to compare.</param>
            <param name="fDistance">The range that is considered if from has 'reached' to.</param>
            <param name="bEqualTo">If this calculation needs to check if the distance between from and to are equal.</param>
            <returns></returns>
        </member>
        <member name="M:MW.MWPhysics.Kinematics.HasReached(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.Single)">
            <summary>
            If the distance between from and to is less than or EqualTo detection.
            </summary>
            <param name="vFrom">The reference coordinate to compare.</param>
            <param name="vTo">The target coordinate to compare.</param>
            <param name="bEqualTo">If this calculation needs to check if the distance between from and to are equal.</param>
            <param name="fDistance">The range that is considered if from has 'reached' to.</param>
            <returns></returns>
        </member>
        <member name="M:MW.MWPhysics.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Moves self towards target while moving at velocity with a maximum turn angle of TurnRadius degrees.
            </summary>
            <param name="RBSelf">The Rigidbody to move.</param>
            <param name="TTarget">The Transform destination.</param>
            <param name="fVelocity">The rate at which self moves towards target.</param>
            <param name="fTurnRadius">The maximum degrees self can turn towards target.</param>
        </member>
        <member name="M:MW.MWPhysics.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Moves self towards target while moving at velocity with a maximum turn angle of TurnRadius degrees.
            </summary>
            <param name="RBSelf">The Rigidbody to move.</param>
            <param name="vTarget">The destination coordinates.</param>
            <param name="fVelocity">The rate at which self moves towards target.</param>
            <param name="fTurnRadius">The maximum degrees self can turn towards target.</param>
        </member>
        <member name="M:MW.MWPhysics.Mathematics.Acceleration(MW.Equation,System.Single,System.Single,System.Single)">
            <param name="EEquation">The equation to use to accelerate.</param>
            <param name="fCurrentSpeed">The current speed of the acceleration.</param>
            <param name="fRateOfAcceleration">The rate to accelerate towards to terminal from current speed.</param>
            <param name="fTerminal">The maximum speed.</param>
            <returns>The acceleration value using Easing equation, using the current speed and rate of acceleration towards terminal by over time.</returns>
        </member>
        <member name="M:MW.MWPhysics.Mathematics.AccelerationRate(UnityEngine.Rigidbody,System.Single)">
            <param name="RBSelf">The rigidbody to calculate an acceleration rate.</param>
            <param name="fSpeed">The current speed of the rigidbody.</param>
            <returns>The float rate of movement in metres per second.</returns>
        </member>
        <member name="M:MW.MWPhysics.Mathematics.Speed(UnityEngine.Rigidbody,MW.Units)">
            <param name="RBSelf">The Rigidbody to read a speed from.</param>
            <param name="UUnit">The desired unit of measurement.</param>
            <returns>A speed reading from self in unit of measurement.</returns>
        </member>
        <member name="M:MW.MWPhysics.Mathematics.PredictiveProjectile(UnityEngine.Rigidbody,UnityEngine.Rigidbody)">
            <summary>The direction to intercept RBTarget relative to RBSelf.</summary>
            <param name="RBSelf">The Rigidbody predicting the movement of RBTarget.</param>
            <param name="RBTarget">The Rigidbody to predict.</param>
        </member>
        <member name="M:MW.MWPhysics.Aerodynamics.AirResitance(UnityEngine.Rigidbody)">
            <summary>The direction of natural air resistance.</summary>
            <param name="RBSelf">The rigidbody to apply air resistance to.</param>
        </member>
        <member name="M:MW.MWPhysics.PhysicsInterpolation.V3Interpolate(MW.Equation,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>Interpolates between origin and destination using equation in duration.</summary>
            <param name="EEquation">The equation to use to interpolate.</param>
            <param name="vOrigin">The origin of the interpolation.</param>
            <param name="vDestination">The destination of this interpolation.</param>
            <param name="fDuration">The duration of the interpolation.</param>
            <param name="fStart">The starting value of equation.</param>
            <param name="fFinal">The final value of equation.</param>
        </member>
        <member name="M:MW.MWPhysics.PhysicsInterpolation.V3Interpolate(MW.Equation,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Interpolates between origin and destination using equation.</summary>
            <param name="EEquation">The equation to use to interpolate.</param>
            <param name="vOrigin">The origin of the interpolation.</param>
            <param name="vDestination">The destination of this interpolation.</param>
            <param name="fStart">The starting value of equation.</param>
            <param name="fFinal">The final value of equation.</param>
        </member>
        <member name="M:MW.MWPhysics.PhysicsInterpolation.V3Interpolate(MW.Equation,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Interpolates between origin and destination.</summary>
            <param name="EEquation">The equation to use for interpolation.</param>
            <param name="vOrigin">The origin of the interpolation.</param>
            <param name="vDestination">The destination of this interpolation.</param>
        </member>
        <member name="M:MW.MWPhysics.PhysicsInterpolation.V3Interpolate(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Interpolates between origin and destination at a constant rate.</summary>
            <param name="vOrigin">The origin of the interpolation.</param>
            <param name="vDestination">The destination of this interpolation.</param>
        </member>
        <member name="M:MW.MWPhysics.Miscellanous.CollisionAvoidance(UnityEngine.Transform,System.Single,System.Single,UnityEngine.LayerMask,System.Boolean)">
            <summary>The direction in which to avoid colliding with obstacles.</summary>
            <param name="TSelf">The transform wanting to avoid collisions.</param>
            <param name="fAngle">The angle to search for potential collisions.</param>
            <param name="fSearchDistance">The distance to search for collisions.</param>
            <param name="lmObstacles">The layer to avoid colliding with.</param>
            <param name="bDebug">[EDITOR ONLY] Draw lines of the collision avoidance search. Red is the closest collision. Blue is the moving forward direction.</param>
        </member>
    </members>
</doc>
