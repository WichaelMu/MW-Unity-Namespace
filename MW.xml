<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MW</name>
    </assembly>
    <members>
        <member name="T:MW.Audible.Audio">
            <summary>The Audio controller for in-game sounds.</summary>
        </member>
        <member name="M:MW.Audible.Audio.Initialise(MW.Audible.Sound[])">
            <summary>Populates the Sounds array to match the settings.</summary>
        </member>
        <member name="M:MW.Audible.Audio.Play(System.String)">
            <summary>Plays sound of name n.</summary>
            <param name="sName">The name of the requested sound to play in capital casing.</param>
        </member>
        <member name="M:MW.Audible.Audio.Stop(System.String)">
            <summary>Stops sound of name n.</summary>
            <param name="sName">The name of the requested sound to stop playing in capital casing.</param>
        </member>
        <member name="M:MW.Audible.Audio.StopAll">
            <summary>Stop every sound in the game.</summary>
        </member>
        <member name="M:MW.Audible.Audio.Find(System.String)">
            <summary>Returns a sound in the Sounds array.</summary>
            <param name="n">The name of the requested sound.</param>
            <returns>The sound clip of the requested sound.</returns>
        </member>
        <member name="M:MW.Audible.Audio.IsPlaying(System.String)">
            <summary>Whether or not sound of name n is playing.</summary>
            <param name="sName">The name of the sound to query in capital casing.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector3)">
            <summary>The corresponding colour in RGA using Vector3.</summary>
            <param name="vColour">The RGB/XYZ channel values, respectively.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGB.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(UnityEngine.Vector4)">
            <summary>The corresponding colour in RGBA using Vector4.</summary>
            <param name="v4Colour">The RGBA/XYZW channel values, respectivaly.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.Colour255(System.Single,System.Single,System.Single,System.Single)">
            <summary>The corresponding colour from 0 - 255 in RGBA.</summary>
            <param name="r">The red value.</param>
            <param name="g">The green value.</param>
            <param name="b">The blue value.</param>
            <param name="a">The alpha value.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String)">
            <summary>Converts a hexadecimal to its corresponding colour.</summary>
             <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.Single)">
            <summary>The corresponding hexadecimal and alpha colour.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="fAlpha">The float alpha.</param>
        </member>
        <member name="M:MW.Conversion.Colour.ColourHex(System.String,System.String)">
            <summary>The corresponding hexadecimal colour and hexadecimal alpha.</summary>
            <param name="sHex">The hexadecimal in the format: "#RRGGBB"; where '#' denotes a hexadecimal, 'RR' denotes the Red colour channel, 'GG' denotes the Green colour channel and 'BB' denotes the Blue colour channel.</param>
            <param name="sAlpha">The hexadecimal in the format: "#AA"; where '#' denotes a hexadecimal and 'AA' denotes the Alpha channel.</param>
        </member>
        <member name="M:MW.Conversion.Bearing.Direction(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The normalised direction to to, relative to from.</summary>
            <param name="vFrom">The Vector3 seeking a direction to to.</param>
            <param name="vTo">The direction to look at.</param>
        </member>
        <member name="M:MW.Conversion.Bearing.Direction(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>The normalised direction to to, relative to from.</summary>
            <param name="vFrom">The Vector3 seeking a direction to to.</param>
            <param name="vTo">The direction to look at.</param>
        </member>
        <member name="T:MW.Diagnostics.EVerbosity">
            <summary>UnityEngine.Debug.[MW.Development.Diagnostics.Stacktrace.EVerbosity]</summary>
        </member>
        <member name="T:MW.Diagnostics.Stopwatch">
            <summary>Track execution time of code.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.#ctor(System.Boolean)">
            <summary>Creates a new Stopwatch.</summary>
            <param name="bStartOnCreation">Immediately starting timing upon instantiating?</param>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Start">
            <summary>Start Stopwatch.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Stop">
            <summary>Stop Stopwatch and get the elapsed time.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Restart">
            <summary>Restarts Stopwatch and get the time before restarting.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.Time">
            <summary>Get the current elapsed time.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.TimeInSeconds">
            <summary>Get the current elapsed time in seconds.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stopwatch.ToSeconds(System.Int64)">
            <summary>Converts milliseconds to seconds.</summary>
            <param name="lMilliseconds">Milliseconds to convert.</param>
        </member>
        <member name="T:MW.Diagnostics.Stacktrace">
            <summary>Provides a stacktrace for code.</summary>
        </member>
        <member name="M:MW.Diagnostics.Stacktrace.Here(MW.Diagnostics.EVerbosity)">
            <summary>Stacktrace using UnityEngine.Debug with verbosity.</summary>
            <param name="verbosity">The verbosity of the UnityEngine.Debug.</param>
        </member>
        <member name="M:MW.Diagnostics.Stacktrace.Here(System.String,MW.Diagnostics.EVerbosity)">
            <summary>Stacktrace using UnityEngine.Debug with verbosity and a message.</summary>
            <param name="sMessage">The message to show.</param>
            <param name="verbosity">The verbosity og the UnityEngine.Debug.</param>
        </member>
        <member name="M:MW.Diagnostics.Debug.Log(System.Object[])">
            <summary>UnityEngine.Logs every object.</summary>
            <param name="debug">The list of objects to log.</param>
        </member>
        <member name="M:MW.Diagnostics.Debug.LogError(System.Object[])">
            <summary>UnityEngine.LogErrors every object.</summary>
            <param name="debug">The list of objects to log.</param>
        </member>
        <member name="M:MW.Diagnostics.Debug.LogWarning(System.Object[])">
            <summary>UnityEngine.LogWarnings every object.</summary>
            <param name="debug">The list of objects to log.</param>
        </member>
        <member name="M:MW.Diagnostics.Editor.Terminate">
            <summary>Switches the Unity Editor to Edit mode.</summary>
        </member>
        <member name="M:MW.Easing.Interpolate.GetEasingFunction(MW.EEquation)">
            <summary>
            Returns the function associated to the easingFunction enum. This fDuration returned should be cached as it allocates memory
            to return.
            </summary>
            <param name="EEasingFunction">The enum associated with the easing function.</param>
            <returns>The easing function</returns>
        </member>
        <member name="M:MW.Easing.Interpolate.GetEasingFunctionDerivative(MW.EEquation)">
            <summary>
            Gets the derivative function of the appropriate easing function. If you use an easing function for position then this
            function can get you the speed at a given time (normalized).
            </summary>
            <param name="easingFunction"></param>
            <returns>The derivative function</returns>
        </member>
        <member name="F:MW.General.Generic.kPhi">
            <summary>The golden ratio.</summary>
        </member>
        <member name="F:MW.General.Generic.kE">
            <summary>Euler's number.</summary>
        </member>
        <member name="F:MW.General.Generic.k1To255RGB">
            <summary>The ratio between 1 and 255.</summary>
        </member>
        <member name="M:MW.General.Generic.InFOV(MW.EDirection,UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>If self can see target within SearchAngle degrees while facing face.</summary>
            <param name="dirFace">The direction self is facing.</param>
            <param name="ASelf">The transform searching for target.</param>
            <param name="ATarget">The transform to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.General.Generic.InFOV(MW.EDirection,UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>If self can see target within SearchAngle degrees while facing face.</summary>
            <param name="dirFace">The direction self is facing.</param>
            <param name="ASelf">The transform searching for target.</param>
            <param name="vTarget">The position to look out for.</param>
            <param name="fSearchAngle">The maximum degrees to search for target.</param>
        </member>
        <member name="M:MW.General.Generic.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.LayerMask)">
            <summary>If self has an unobstructed line of sight to to.</summary>
            <param name="vSelf">The position to look from.</param>
            <param name="vTo">The position to look to.</param>
            <param name="lmObstacles">The obstacles to consider obtrusive.</param>
        </member>
        <member name="M:MW.General.Generic.LineOfSight(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>If self has an unobstructed line of sight to to.</summary>
            <param name="vSelf">The position to look from.</param>
            <param name="vTo">The position to look to.</param>
        </member>
        <member name="M:MW.General.Generic.RoundToDP(System.Single,System.Int32)">
            <summary>The fValue rounded to dp decimal places.</summary>
             <param name="fValue">The value to be rounded.</param>
             <param name="nDP">The decimal places to be included.</param>
        </member>
        <member name="M:MW.General.Generic.FlipFlop(System.Boolean@)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
        </member>
        <member name="M:MW.General.Generic.FlipFlop(System.Boolean@,System.Action,System.Action)">
            <summary>Flip-Flops Bool.</summary>
            <param name="bBool"></param>
            <param name="ACallbackTrue">The method to call if the flip-flop is true.</param>
            <param name="ACallbackFalse">The method to call if the flip-flop is false.</param>
        </member>
        <member name="M:MW.General.Generic.IsWithin(System.Single,System.Single,System.Single)">
            <summary>If value is within the +- limit of from.</summary>
            <param name="fValue">The value to check.</param>
            <param name="fFrom">The value to compare.</param>
            <param name="fLimit">The limits to consider.</param>
        </member>
        <member name="M:MW.General.Generic.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The largest vector between L and R, according to magnitude.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.General.Generic.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>The smallest vector vector between L and R, according to magnitude.</summary>
            <param name="vL"></param>
            <param name="vR"></param>
        </member>
        <member name="M:MW.General.Generic.Fibonacci(System.Int32)">
            <summary>Returns the n'th Fibonacci number.</summary>
            <param name="n"></param>
        </member>
        <member name="M:MW.General.Generic.GenerateEqualSphere(System.Int32,System.Single)">
            <summary>Generates spherical points with an equal distribution.</summary>
            <param name="nResolution">The number of points to generate.</param>
            <param name="fGoldenRationModifier">Adjusts the golden ratio.</param>
            <returns>The Vector3[] points for the sphere.</returns>
        </member>
        <member name="M:MW.General.Generic.Bridge(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>Generates the points to 'bridge' origin and target together at a height as an arc.</summary>
            <param name="vOrigin">The starting point of the bridge.</param>
            <param name="vTarget">The ending point of the bridge.</param>
            <param name="nResolution">The number of points for the bridge.</param>
            <param name="fHeight">The maximum height of the bridge.</param>
            <returns>The Vector3[] points for the bridge.</returns>
        </member>
        <member name="M:MW.HUD.Draw.DrawLine(UnityEngine.LineRenderer,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,UnityEngine.Material,System.Boolean)">
            <summary>Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.</summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="MMaterial">The material used to draw the line.</param>
            <param name="bUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawLine(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Color,System.Single,UnityEngine.Vector3,System.Boolean)">
            <summary>Draws a line from to to in StartColor to EndColor at LineWidth thickness with an offset at UseWorldSpace with NumberOfSegments.</summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vFrom">The coordinates where the line will originate.</param>
            <param name="vTo">The coordinates where the line will end.</param>
            <param name="colStartColour">The starting colour gradient for this line.</param>
            <param name="colEndColour">The ending colour gradient for this line.</param>
            <param name="fLineWidth">The thickness of this line.</param>
            <param name="vOffset">The offset to place this line.</param>
            <param name="bUseWorldSpace">Should this line use world space?</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawCircle(UnityEngine.LineRenderer,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,UnityEngine.Material,System.Boolean,System.Int32)">
            <summary>Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.</summary>
            <param name="LRSelf">The LineRenderer of the GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="MMaterial">The material used to draw the circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="M:MW.HUD.Draw.DrawCircle(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,UnityEngine.Color,System.Single,System.Boolean,System.Int32)">
            <summary>Draws a circle with a centre at around at radius with a LineColour at LineWidth thickness at UseWorldSpace with NumberOfSegments.</summary>
            <param name="GSelf">The GameObject calling this.</param>
            <param name="vAround">The centre of the circle to be drawn.</param>
            <param name="fRadius">The radius of this circle.</param>
            <param name="colLineColour">The colour of this circle.</param>
            <param name="fLineWidth">The thickness of this circle.</param>
            <param name="bUseWorldSpace">Should this circle use world space?</param>
            <param name="nNumberOfSegments">The number of verticies of this circle.</param>
        </member>
        <member name="M:MW.HUD.UI.ScaleSize(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Scales the canvas element relative to self.</summary>
            <param name="vSelf">The position to scale from.</param>
            <param name="vScaleWith">The position to scale with.</param>
            <returns>The relative scale size in Vector2.</returns>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.UI.Mode)">
            <summary>Animates tmpTextMeshPro to display sContent like a typewriter.</summary>
            <param name="tmpTextMeshPro">The text to animate.</param>
            <param name="sContent">The content to display.</param>
            <param name="fDelay">The time gap between writing a new letter.</param>
            <param name="mMode">Should the text append, or clear?</param>
        </member>
        <member name="M:MW.HUD.UI.TypewriterText(TMPro.TextMeshProUGUI,System.String,System.Single,MW.HUD.UI.Mode,System.String)">
            <summary>Animates tmpTextMeshPro to display sContent like a typewriter.</summary>
            <param name="tmpTextMeshPro">The text to animate.</param>
            <param name="sContent">The content to display.</param>
            <param name="fDelay">The time gap between writing a new letter.</param>
            <param name="mMode">Should the text append, or clear?</param>
            <param name="sSound">The sound to play for every letter added on.</param>
        </member>
        <member name="M:MW.IO.Mouse.Click(MW.EButton,System.Boolean,System.Boolean)">
            <param name="BMouse">The mouse press to listen for.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If the BMouse was clicked or held.</returns>
        </member>
        <member name="M:MW.IO.Keyboard.Key(UnityEngine.KeyCode,System.Boolean,System.Boolean)">
            <param name="KCStroke">The key that was pressed on the keyboard.</param>
            <param name="bHold">Whether or not to check if this button is held down.</param>
            <param name="bUp">Whether or not to check if this button is released.</param>
            <returns>If Stroke was pressed or Held.</returns>
        </member>
        <member name="F:MW.Kinetic.Kinematics.kVelocityRatio">
            <summary>Convert inspector speed to m/s.</summary>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HasReached(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>If the distance between from and to is less than or EqualTo detection.</summary>
            <param name="vFrom">The reference coordinate to compare.</param>
            <param name="vTo">The target coordinate to compare.</param>
            <param name="fDistance">The range that is considered if from has 'reached' to.</param>
            <param name="bEqualTo">If this calculation needs to check if the distance between from and to are equal.</param>
            <returns></returns>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HasReached(UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.Single)">
            <summary>If the distance between from and to is less than or EqualTo detection.</summary>
            <param name="vFrom">The reference coordinate to compare.</param>
            <param name="vTo">The target coordinate to compare.</param>
            <param name="bEqualTo">If this calculation needs to check if the distance between from and to are equal.</param>
            <param name="fDistance">The range that is considered if from has 'reached' to.</param>
            <returns></returns>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Transform,System.Single,System.Single)">
            <summary>Moves self towards target while moving at velocity with a maximum turn angle of TurnRadius degrees.</summary>
            <param name="RSelf">The Rigidbody to move.</param>
            <param name="ATarget">The Transform destination.</param>
            <param name="fVelocity">The rate at which self moves towards target.</param>
            <param name="fTurnRadius">The maximum degrees self can turn towards target.</param>
        </member>
        <member name="M:MW.Kinetic.Kinematics.HomeTowards(UnityEngine.Rigidbody,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>Moves self towards target while moving at velocity with a maximum turn angle of TurnRadius degrees.</summary>
            <param name="RSelf">The Rigidbody to move.</param>
            <param name="vTarget">The destination coordinates.</param>
            <param name="fVelocity">The rate at which self moves towards target.</param>
            <param name="fTurnRadius">The maximum degrees self can turn towards target.</param>
        </member>
        <member name="M:MW.Kinetic.Aerodynamics.AirResistance(UnityEngine.Rigidbody)">
            <summary>The direction of natural air resistance.</summary>
            <param name="RSelf">The rigidbody to apply air resistance to.</param>
        </member>
        <member name="M:MW.Kinetic.Aerodynamics.Lift(System.Single,System.Single,System.Single,System.Single)">
            <summary>The scale of lift applied to a wing with fWingArea travelling at fVelocity through a fluid at fDensity with fLiftCoefficient.</summary>
            <param name="fLiftCoefficient">The heuristic coefficient for lift.</param>
            <param name="fDensity">The density of the fluid.</param>
            <param name="fVelocity">The speed at which the wing is travelling.</param>
            <param name="fWingArea">The area of the wing.</param>
        </member>
        <member name="M:MW.Kinetic.Miscellanous.CollisionAvoidance(UnityEngine.Transform,System.Single,System.Single,UnityEngine.LayerMask,System.Boolean)">
            <summary>The direction in which to avoid colliding with obstacles.</summary>
            <param name="ASelf">The transform wanting to avoid collisions.</param>
            <param name="fAngle">The angle to search for potential collisions.</param>
            <param name="fSearchDistance">The distance to search for collisions.</param>
            <param name="lmObstacles">The layer to avoid colliding with.</param>
            <param name="bDebug">[EDITOR ONLY] Draw lines of the collision avoidance search. Red is the closest collision. Blue is the moving forward direction.</param>
        </member>
        <member name="M:MW.Math.Mathematics.Acceleration(MW.EEquation,System.Single,System.Single,System.Single)">
            <param name="EEquation">The equation to use to accelerate.</param>
            <param name="fCurrentSpeed">The current speed of the acceleration.</param>
            <param name="fRateOfAcceleration">The rate to accelerate towards to terminal from current speed.</param>
            <param name="fTerminal">The maximum speed.</param>
            <returns>The acceleration value using Easing equation, using the current speed and rate of acceleration towards terminal by over time.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.AccelerationRate(UnityEngine.Rigidbody,System.Single)">
            <param name="RSelf">The rigidbody to calculate an acceleration rate.</param>
            <param name="fSpeed">The current speed of the rigidbody.</param>
            <returns>The float rate of movement in metres per second.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.Speed(UnityEngine.Rigidbody,MW.EUnits)">
            <param name="RSelf">The Rigidbody to read a speed from.</param>
            <param name="UUnit">The desired unit of measurement.</param>
            <returns>A speed reading from self in unit of measurement.</returns>
        </member>
        <member name="M:MW.Math.Mathematics.PredictiveProjectile(UnityEngine.Rigidbody,UnityEngine.Rigidbody)">
            <summary>The direction to intercept RBTarget relative to RSelf.</summary>
            <param name="RSelf">The Rigidbody predicting the movement of RBTarget.</param>
            <param name="RBTarget">The Rigidbody to predict.</param>
        </member>
        <member name="M:MW.Math.Mathematics.IsPowerOfTwo(System.Int32)">
            <summary>Whether nNumber is a power of two.</summary>
            <param name="nNumber">The number to check.</param>
        </member>
        <member name="M:MW.Math.Mathematics.LowestCommonMultiple(System.Int32,System.Int32)">
            <summary>The lowest common multiple of na and nb.</summary>
        </member>
        <member name="M:MW.Math.Mathematics.Wrap(System.Single,System.Single,System.Single)">
            <summary>Wraps TN between TMin and TMax.</summary>
            <param name="TN">The float number to wrap.</param>
            <param name="TMin">The minimum value to wrap.</param>
            <param name="TMax">The maximum value to wrap.</param>
        </member>
        <member name="M:MW.Math.Mathematics.Parallel(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>Whether v1 is parallel to v2 within fParallelThreshold.</summary>
            <param name="v1">Whether this vector is parallel to the other.</param>
            <param name="v2">Whether this vector is parallel to the other.</param>
            <param name="fParallelThreshold">The threshold to consider parallel vectors.</param>
        </member>
        <member name="M:MW.Math.Mathematics.IsNormalised(UnityEngine.Vector3)">
            <summary>Whether vVector has been normalised.</summary>
            <param name="vVector">The vector to check.</param>
        </member>
        <member name="M:MW.Math.Mathematics.AngleFromVectorXZ(UnityEngine.Vector3)">
            <summary>The angle in degrees pointing towards vDirection using the X-Axis and Z-Axis. (For 3D space)</summary>
            <param name="vDirection">The direction to calculate an angle towards.</param>
        </member>
        <member name="M:MW.Math.Mathematics.AngleFromVectorXY(UnityEngine.Vector3)">
            <summary>The angle in degrees pointing towards vDirection using the X-Axis and Y-Axis. (For 2D space)</summary>
            <param name="vDirection">The direction to calculate an angle towards.</param>
        </member>
        <member name="M:MW.Math.Mathematics.VectorFromAngle(System.Single,MW.EDirection)">
            <summary>Returns a normalised Vector at fDegrees, relative to dirForward.</summary>
            <param name="fDegrees">The angle offset.</param>
            <param name="dirForward">The forward direction.</param>
        </member>
        <member name="T:MW.TPair`2">
            <summary>Generates a new pair of two types of values.</summary>
            <typeparam name="T_First">The type of the first variable to store.</typeparam>
            <typeparam name="T_Second">The type of the second variable to store.</typeparam>
        </member>
        <member name="T:MW.TTriple`3">
            <summary>Generates a new variable of three types of values.</summary>
            <typeparam name="T_First">The type of the first variable to store.</typeparam>
            <typeparam name="T_Second">The type of the second variable to store.</typeparam>
            <typeparam name="T_Third">The type of the third variable to store.</typeparam>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Transform)">
            <summary>Have the camera follow target's transform.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="ATarget">The target's transform component.</param>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the camera to follow target's transform at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="ATarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Camera,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the camera follow target's position at an offset.</summary>
            <param name="CCamera">The camera to move.</param>
            <param name="vTarget">The target's position to follow.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Transform)">
            <summary>Have the main camera follow target's transform.</summary>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's transform at an offset.</summary>
            <param name="ATarget">The target's transform component.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position.</summary>
        </member>
        <member name="M:MW.Optics.Tracking.CameraFollow(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>Have the main camera follow target's position at an offset.</summary>
            <param name="vTarget">The target's position.</param>
            <param name="vOffset">The target's position at an offset.</param>
        </member>
        <member name="M:MW.Optics.Tracking.Billboard(UnityEngine.Transform)">
            <summary>Ensures the transform always faces the main camera.</summary>
            <param name="ASelf">The transform to look towards the main camera.</param>
        </member>
        <member name="M:MW.Optics.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>Ensures the transform always faces camera.</summary>
            <param name="ASelf">The transform to look towards the camera.</param>
            <param name="CCamera">The camera to look at.</param>
        </member>
        <member name="M:MW.Optics.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="ASelf">The transform to look towards the point.</param>
            <param name="APoint">The transform of where self needs to look towards</param>
        </member>
        <member name="M:MW.Optics.Tracking.Billboard(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>Ensures the transform always faces point.</summary>
            <param name="ASelf">The transform to look towards the point.</param>
            <param name="vPoint">The point in world coordinates.</param>
        </member>
        <member name="M:MW.Optics.Orthographic.Raycast(UnityEngine.Camera)">
            <summary>Fires a ray from CCamera to mouse position.</summary>
            <returns>Pair::First RaycastHit2D information about the Raycast. Pair::Second if the ray hit something.</returns>
        </member>
    </members>
</doc>
